Branches

O que são branches

Quase todo Sistema de Controle de Versionamento tem alguma forma de suporte a ramificações (Branches). Ramificação significa que 
você diverge da linha principal de desenvolvimento e continua a trabalhar sem alterar essa linha principal.
Ao contrário de muitos outros sistemas, o Git incentiva fluxos de trabalho que se ramificam e se fundem com frequência, até mesmo 
várias vezes ao dia. Compreender e dominar esse recurso oferece uma ferramenta poderosa e única e pode mudar totalmente a maneira 
como você desenvolve.
Para realmente entender como o Git trabalha com Branches, precisamos dar um passo atrás e examinar como o Git armazena seus dados.
O Git não armazena dados como uma série de mudanças ou diferenças, mas sim como uma série de snapshots (instantâneos de um momento).
Quando você faz um commit, o Git armazena um objeto de commit que contém um ponteiro para o snapshot do conteúdo que você testou.
Este objeto também contém o nome do autor e o e-mail, a mensagem que você digitou e ponteiros para o commit ou commits que vieram 
antes desse commit (seu pai ou pais): sem pai para o commit inicial, um pai para um commit normal, e vários pais para um commit 
que resulta de uma fusão de dois ou mais branches.
Quando você faz um commit executando git commit, o Git verifica cada subdiretório (neste caso, apenas o diretório raiz do projeto)
e armazena esses objetos no repositório do Git. O Git então cria um objeto de commit que possui os metadados e um ponteiro para a 
raiz do projeto para que ele possa recriar aquele snapshots quando necessário.
Seu repositório Git contém pelo menos três objetos: um blob para o conteúdo de cada um dos seus arquivos, uma árvore que lista 
o conteúdo do diretório e especifica quais nomes de arquivo são armazenados e quais seus blobs e um commit com o ponteiro para 
essa árvore e todos os metadados de commit. Se você fizer algumas mudanças e confirmar novamente, o próximo commit armazena um 
ponteiro para o commit que veio imediatamente antes dele.
Um branch no Git é simplesmente um ponteiro móvel para um desses commits. O nome do branch padrão no Git é master. Conforme você 
começa a fazer commits, você recebe um branch master que aponta para o último commit que você fez. Cada vez que você faz um novo 
commit, ele avança automaticamente.

Criando um novo branch

O que acontece se você criar um novo branch? Bem, fazer isso cria um novo ponteiro para você mover. Digamos que você crie um 
novo branch chamado: testing. Você faz isso com o comando git branch :
$ git branch testing

Isso cria um novo ponteiro para o mesmo commit em que você está atualmente.
Como o Git sabe em qual branch você está atualmente? Ele mantém um ponteiro especial chamado HEAD. Note que isso é muito 
diferente do conceito de HEAD em outros sistemas de versionamento com os quais você pode estar acostumado, como Subversion ou 
CVS. No Git, isso é um ponteiro para o branch local em que você está. Neste caso, você ainda está em master. O comando git 
branch apenas criou um novo branch - ele não mudou para aquele branch.
Você pode ver isso facilmente executando um simples comando git log que mostra para onde os ponteiros do branch estão apontando. 
Esta opção é chamada de --decorate.

Alternando entre Branches

Para mudar para um branch existente, você executa o comando git checkout. Isso move o HEAD e o aponta para a branch que você
selecionou.
Agora o histórico do seu projeto divergiu (consulte Histórico de diferenças). Você criou e mudou para um branch, fez algum 
trabalho nele e, em seguida, voltou para o seu branch principal e fez outro trabalho. Ambas as mudanças são isoladas em branches 
separados: você pode alternar entre os branches e mesclá-los quando estiver pronto. E você fez tudo isso com comandos simples 
branch,` checkout` e commit.