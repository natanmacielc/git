Historico

Vendo o histórico de commits
Depois de você ter criado vários commits ou se você clonou um repositório com um histórico de commits pré-existente, você vai 
provavelmente querer olhar para trás e ver o que aconteceu. A ferramenta mais básica e poderosa para fazer isso é o comando git 
log.
Por padrão, sem argumentos, git log lista os commits feitos neste repositório em ordem cronológica inversa; isto é, o commit mais 
recente aparece primeiro. Como você pode ver, esse comando lista cada commit com o seu checksum SHA-1, o nome e email do autor, 
data de inserção, e a mensagem do commit.
Está disponível um enorme número e variedade de opções para o comando git log a fim de lhe mostrar exatamente aquilo pelo que 
está procurando. Aqui, vamos mostrar a você algumas das mais populares.

Uma das opções que mais ajuda é -p, que mostra as diferenças introduzidas em cada commit. Você pode também usar -2, que lista no 
retorno apenas os dois últimos itens.

Você pode também usar uma série de opções resumidas com o git log. Por exemplo, se você quer ver algumas estatísticas abreviadas 
para cada commit, você pode usar a opção --stat:
Como você pode ver, a opção --stat apresenta abaixo de cada commit uma lista dos arquivos modificados, quantos arquivos foram 
modificados, e quantas linhas nestes arquivos foram adicionadas e removidas. Por último ela também colocar um resumo das 
informações.
Uma outra opção realmente muito util é --pretty. Essa opção modifica os registros retornados para formar outro formato diferente 
do padrão. Algumas opções pré-definidas estão disponíveis para você usar. A opção oneline mostra cada commit em uma única linha, 
esta é de muita ajuda se você está olhando para muitos commits. Em adição, as opções short, full, e fuller apresentam o retorno 
quase no mesmo formato porem com menos ou mais informações, respectivamente.

A opção mais interessante é format, a qual permite a você especificar seu próprio formato de registros de retorno. Isso é 
especialmente útil quando você esta gerando um retorno para uma máquina analisar – pois você especifica o formato explicitamente, 
você sabe que isso não irá mudar com as atualizações do Git:

$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit

%H
Hash do commit

%h
Hash do commit abreviado

%T
Hash da árvore

%t
Hash da árvore abreviado

%P
Hashes dos pais

%p
Hashes dos pais abreviado

%an
Nome do Autor

%ae
Email do Autor

%ad
Data do Autor (o formato segue a opção --date=option)

%ar
Data do Autor, relativa

%cn
Nome do Committer

%ce
Email do Committer

%cd
Data do Committer

%cr
Data do Committer, relativa

%s
Comentário

As opções oneline e format são particularmente úteis juntamente com uma outra opção de log chamada --graph. Esta opção adiciona 
um pequeno gráfico ASCII mostrando seu histórico de branch e merge.

Outras opções para o git log:

-p
Mostra o patch introduzido com cada commit.

--stat
Mostra estatísticas de arquivos modificados em cada commit.

--shortstat
Exibe apenas a linha informando a alteração, inserção e exclusão do comando --stat.

--name-only
Mostra a lista de arquivos modificados após as informações de commit.

--name-status
Mostra também a lista de arquivos que sofreram modificação com informações adicionadas / modificadas / excluídas.

--abbrev-commit
Mostra apenas os primeiros caracteres da soma de verificação SHA-1 em vez de todos os 40.

--relative-date
Exibe a data em um formato relativo (por exemplo, ‘` 2 semanas atrás '’) em vez de usar o formato de data completo.

--graph
Exibe um gráfico ASCII do histórico de branches e merges ao lado da saída do log.

--pretty
Mostra os commits em um formato alternativo. As opções incluem oneline, short, full, fuller e format (onde você especifica seu próprio formato).

Limitando o retorno do comando Log
Em adição ás opções de formatação do retorno, git log leva um número útil de opções de limitação – que são, opções que lhe 
permitem mostrar apenas um subconjunto de commits. Você já viu essa opção antes – a opção -2, a qual mostra apenas os dois 
últimos commits.

Entretanto, as opções de lina do tempo tais como --since e --until são muito uteis. Por exemplo, esse comando retorna a lista de 
commits feitos nas últimas duas semanas:
$ git log --since=2.weeks

Esse comando funciona com um grande número de formatos – você pode determinar uma data específica como "2008-01-15", ou uma 
data relativa tal como "2 anos 1 dia 3 minutos atrás".

Você pode também filtrar a lista de commits que combinam com algum critério de busca. A opção --author permite você filtrar por 
um autor especifico, e a opção --grep permite você procurar por palavras chaves na mensagem do commit. (Note que se você quer 
especificar ambas as opções autor e grep, você tem que adicionar --all-match ou o comando irá combinar com qualquer uma delas.)

Uma outra opção de filtro que realmente ajuda muito é -S A qual pega um conjunto de caracteres e mostra apenas os commits que 
introduzem uma mudança no código onde esse conjunto é adicionado ou removido. Por exemplo, se você quer encontrar o último 
commit que adicionou ou removeu uma referência a uma função especifica, você poderia chamar:
$ git log -Sfunction_name

Limitadores de saída do git log:

-(n)
Exibe somente os últimos n commits

--since, --after
Limita os commits para aqueles feitos após a data especificada.

--until, --before
Limita os commits aos feitos antes da data especificada.

--author
Mostra apenas os commits nos quais a entrada do autor corresponde à string especificada.

--committer
Mostra apenas os commits nos quais a entrada do committer corresponde à string especificada.

--grep
Mostra apenas os commits com uma mensagem de commit contendo a string

-S
mostrar apenas commits adicionando ou removendo o código que corresponde à string

Por exemplo, se você quer ver quais commits estão modificando arquivos de testes no histórico do código fonte do Git que 
sofreram commit por Junio Hamano no mês de Outubro de 2008 e não são commits de merge, você pode executar algo semelhante a isso:
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/